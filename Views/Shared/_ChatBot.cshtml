<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Yogloans Chatbot</title>
  <link rel="stylesheet" href="/css/chat/chat.css">


  <style>
    #popup-tex {
      transition: 0.5s;
    }

    @@keyframes pulse {
      0% {
        transform: scale(1);
      }
      100% {
        transform: scale(1.05);
      }
    }

    @@keyframes slideIn {
      from {
        transform: translateX(100%);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }
  </style>
</head>
<body>

<div class="chat">
  <div id="popup-tex" style="display: none;">May I Help You</div>
  <img src="../images/logo/chat-icon.png" alt="Chat Icon" class="chat-icon" id="chat-icon-image">
</div>

<div id="chatbox">
  <div class="chat-header">
    <div class="header-content">
      <h2>I'm Here to Help You</h2>
      <p>Ask me anything or start a conversation.</p>
    </div>
    <div class="status-indicator"></div>
  </div>

  <img src="../images/logo/logo.png" alt="Logo">

  <div id="messages"></div>

  <div class="input-container">
    <input type="text" id="userInput" placeholder="Ask me about loans..." />
    <button id="sendBtn">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <line x1="22" y1="2" x2="11" y2="13"></line>
        <polygon points="22,2 15,22 11,13 2,9"></polygon>
      </svg>
    </button>
  </div>
</div>

<script>
// --- Global Variables ---
let knowledge = {};
let isLoading = false;
let currentTheme = 'light';

// --- Fetch knowledge.json ---
fetch('../js/chat/knowledge.json')
  .then(res => res.json())
  .then(data => {
    knowledge = data;
    addBotMessage("Hello! I'm the Yogloans assistant. How can I help you today with your loan queries?");
  })
  .catch(error => {
    console.error('Error loading knowledge:', error);
    addBotMessage("Hello! I'm the Yogloans assistant. How can I help you today with your loan queries?");
  });

// --- Response Matching Logic ---
function findBestResponse(input) {
  input = input.toLowerCase().trim();
  let bestIntent = null;
  let maxScore = 0;
  const inputWords = input.split(/\s+/);

  if (!knowledge.intents) return "Oops! Something went wrong. Please try again later.";

  for (const intent of knowledge.intents) {
    let score = 0;
    const sortedKeywords = intent.keywords.filter(k => k).sort((a, b) => b.length - a.length);
    for (const keyword of sortedKeywords) {
      const keywordLower = keyword.toLowerCase();
      if (input === keywordLower) score += 10;
      else if (input.includes(keywordLower)) score += 3;

      const keywordWords = keywordLower.split(/\s+/);
      for (const inputWord of inputWords) {
        for (const keywordWord of keywordWords) {
          if (inputWord === keywordWord) score += 2;
          else if (
            inputWord.length >= 4 &&
            keywordWord.length >= 4 &&
            (inputWord.includes(keywordWord) || keywordWord.includes(inputWord))
          ) {
            score += 1;
          }
        }
      }
    }
    if (intent.tag === "gold_loan") score += 2;


    if (score > maxScore) {
      maxScore = score;
      bestIntent = intent;
    }
  }

  return (maxScore >= 4 && bestIntent) ? bestIntent.response : "I'm sorry, I couldn't understand that. Please ask a question related to loans, documents, or application process.";
}

// --- Message Functions ---
function addUserMessage(text) {
  const msgBox = document.getElementById("messages");
  const messageDiv = document.createElement("div");
  messageDiv.className = "message user";
  messageDiv.innerHTML = `<div class="user-message">${text}</div><div class="user-avatar">U</div>`;
  msgBox.appendChild(messageDiv);
  msgBox.scrollTop = msgBox.scrollHeight;
}

function addBotMessage(text) {
  const msgBox = document.getElementById("messages");
  const messageDiv = document.createElement("div");
  messageDiv.className = "message bot";
  const reactionsHTML = `
    <div class="message-reactions">
      <button class="reaction-btn" onclick="addReaction(this, 'üëç')" title="Helpful">üëç</button>
      <button class="reaction-btn" onclick="addReaction(this, 'üëé')" title="Not helpful">üëé</button>
      <button class="reaction-btn" onclick="addReaction(this, 'üí¨')" title="Need more info">üí¨</button>
    </div>
  `;
  messageDiv.innerHTML = `<div class="bot-avatar">Y</div><div class="bot-message">${text}${reactionsHTML}</div>`;
  msgBox.appendChild(messageDiv);
  msgBox.scrollTop = msgBox.scrollHeight;

  messageDiv.querySelectorAll('button').forEach(button => {
    button.addEventListener('mouseenter', () => {
      button.style.transform = 'translateY(-2px)';
      button.style.boxShadow = '0 5px 15px rgba(102, 126, 234, 0.4)';
    });
    button.addEventListener('mouseleave', () => {
      button.style.transform = 'translateY(0)';
      button.style.boxShadow = 'none';
    });
  });
}

function addReaction(button, emoji) {
  button.parentElement.querySelectorAll('.reaction-btn').forEach(btn => btn.style.background = 'none');
  button.style.background = 'rgba(102, 126, 234, 0.2)';
  button.style.borderRadius = '50%';
  showFeedback(emoji === 'üëç' ? 'Thank you for the feedback!' : "We'll improve our response.");
}

function showFeedback(message) {
  const feedbackDiv = document.createElement('div');
  feedbackDiv.style.cssText = `
    position: fixed; top: 20px; right: 20px;
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white; padding: 10px 20px;
    border-radius: 20px; z-index: 1000;
    animation: slideIn 0.3s ease;
  `;
  feedbackDiv.textContent = message;
  document.body.appendChild(feedbackDiv);
  setTimeout(() => feedbackDiv.remove(), 3000);
}

function showTypingIndicator() {
  const msgBox = document.getElementById("messages");
  const typingDiv = document.createElement("div");
  typingDiv.className = "message bot typing-indicator";
  typingDiv.id = "typing-indicator";
  typingDiv.innerHTML = `
    <div class="bot-avatar">Y</div>
    <div class="bot-message">
      <div class="typing-dots">
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
      </div>
    </div>
  `;
  msgBox.appendChild(typingDiv);
  msgBox.scrollTop = msgBox.scrollHeight;
}

function hideTypingIndicator() {
  const typingIndicator = document.getElementById("typing-indicator");
  if (typingIndicator) typingIndicator.remove();
}

// --- Handle User Message ---
function handleUserMessage() {
  const inputBox = document.getElementById("userInput");
  const userText = inputBox.value.trim();
  if (!userText) return;

  addUserMessage(userText);
  inputBox.value = "";
  showTypingIndicator();

  setTimeout(() => {
    hideTypingIndicator();
    const botResponse = findBestResponse(userText);
    addBotMessage(botResponse);
  }, 800);
}

// --- Setup Chat Icon Events ---
$(document).ready(function () {
  $('#chat-icon-image').hover(
    function () {
      $('#popup-tex').show();
      $(this).css('animation', 'none');
    },
    function () {
      $('#popup-tex').hide();
      $(this).css('animation', 'pulse 1s ease-in-out infinite alternate');
    }
  );

  let isChatOpen = false;
  $('#chat-icon-image').click(function () {
    $('.chat').toggleClass('active');
    isChatOpen = !isChatOpen;
    $('#popup-tex').text(isChatOpen ? "Close chat" : "May I Help You");
    $(this).attr('src', isChatOpen ? '../images/logo/close.png' : '../images/logo/chat-icon.png');
    $(this).toggleClass('expanded');
    setTimeout(() => {
      $('#chatbox').toggleClass('active');
    }, 200);
  });

  $('#sendBtn').on('click', handleUserMessage);
  $('#userInput').on('keypress', function (e) {
    if (e.key === 'Enter') handleUserMessage();
  });

  // Optional theme loading
  const savedTheme = localStorage.getItem('chatbot-theme');
  if (savedTheme === 'dark') toggleTheme();
});
</script>

</body>
</html>
